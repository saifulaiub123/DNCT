// <auto-generated />
using System;
using Dnct.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dnct.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250112175058_new-table2")]
    partial class newtable2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConnectionsMaster", b =>
                {
                    b.Property<int>("ContnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("contn_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ContnId"));

                    b.Property<string>("AccntStr")
                        .HasColumnType("text")
                        .HasColumnName("accnt_str");

                    b.Property<string>("Attr1")
                        .HasColumnType("text")
                        .HasColumnName("attr1");

                    b.Property<string>("Attr2")
                        .HasColumnType("text")
                        .HasColumnName("attr2");

                    b.Property<string>("Attr3")
                        .HasColumnType("text")
                        .HasColumnName("attr3");

                    b.Property<string>("ContnName")
                        .HasColumnType("text")
                        .HasColumnName("contn_name");

                    b.Property<string>("ContnPort")
                        .HasColumnType("text")
                        .HasColumnName("contn_port");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("text")
                        .HasColumnName("created_user_name");

                    b.Property<string>("DefaultDb")
                        .HasColumnType("text")
                        .HasColumnName("default_db");

                    b.Property<int?>("EnabledInd")
                        .HasColumnType("integer")
                        .HasColumnName("enabled_ind");

                    b.Property<string>("EncrKey")
                        .HasColumnType("text")
                        .HasColumnName("encr_key");

                    b.Property<string>("HostIp")
                        .HasColumnType("text")
                        .HasColumnName("host_ip");

                    b.Property<string>("Logmech")
                        .HasColumnType("text")
                        .HasColumnName("logmech");

                    b.Property<string>("OrclTnsAlias")
                        .HasColumnType("text")
                        .HasColumnName("orcl_tns_alias");

                    b.Property<string>("Paswd")
                        .HasColumnType("text")
                        .HasColumnName("paswd");

                    b.Property<string>("PlatformType")
                        .HasColumnType("text")
                        .HasColumnName("platform_type");

                    b.Property<string>("PrivateKey")
                        .HasColumnType("text")
                        .HasColumnName("private_key");

                    b.Property<string>("PublicKey")
                        .HasColumnType("text")
                        .HasColumnName("public_key");

                    b.Property<string>("TdParameter")
                        .HasColumnType("text")
                        .HasColumnName("td_parameter");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("ContnId");

                    b.ToTable("contns_mstr", "codebotmstr");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.DatabaseSources", b =>
                {
                    b.Property<int>("DatbsSrcId")
                        .HasColumnType("integer")
                        .HasColumnName("datbs_src_id");

                    b.Property<DateTime>("ConfgrtnEffEndTs")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("confgrtn_eff_end_ts");

                    b.Property<string>("AdtnlWherCondtns")
                        .HasColumnType("text")
                        .HasColumnName("adtnl_wher_condtns");

                    b.Property<string>("ConctnName")
                        .HasColumnType("text")
                        .HasColumnName("conctn_name");

                    b.Property<DateTime?>("ConfgrtnEffStartTs")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("confgrtn_eff_start_ts");

                    b.Property<string>("DedupByColmns")
                        .HasColumnType("text")
                        .HasColumnName("dedup_by_colmns");

                    b.Property<string>("DedupLogic")
                        .HasColumnType("text")
                        .HasColumnName("dedup_logic");

                    b.Property<string>("DeltRowIdntfctn")
                        .HasColumnType("text")
                        .HasColumnName("delt_row_idntfctn");

                    b.Property<int?>("EstmtdTblSiz")
                        .HasColumnType("integer")
                        .HasColumnName("estmtd_tbl_siz");

                    b.Property<string>("ObjctAls")
                        .HasColumnType("text")
                        .HasColumnName("objct_als");

                    b.Property<string>("ObjctNatr")
                        .HasColumnType("text")
                        .HasColumnName("objct_natr");

                    b.Property<string>("OdbcTyp")
                        .HasColumnType("text")
                        .HasColumnName("odbc_typ");

                    b.Property<string>("PartitionClause")
                        .HasColumnType("text")
                        .HasColumnName("partition_clause");

                    b.Property<string>("PartitionColmns")
                        .HasColumnType("text")
                        .HasColumnName("partition_colmns");

                    b.Property<string>("PkColmns")
                        .HasColumnType("text")
                        .HasColumnName("pk_colmns");

                    b.Property<string>("Queryband")
                        .HasColumnType("text")
                        .HasColumnName("queryband");

                    b.Property<string>("RepstryName")
                        .HasColumnType("text")
                        .HasColumnName("repstry_name");

                    b.Property<string>("SetlSetupName")
                        .HasColumnType("text")
                        .HasColumnName("setl_setup_name");

                    b.Property<int?>("SorcTargtFileId")
                        .HasColumnType("integer")
                        .HasColumnName("sorc_targt_file_id");

                    b.Property<string>("SqlToUse")
                        .HasColumnType("text")
                        .HasColumnName("sql_to_use");

                    b.Property<string>("TablKind")
                        .HasColumnType("text")
                        .HasColumnName("tabl_kind");

                    b.Property<string>("TargetObjcConName")
                        .HasColumnType("text")
                        .HasColumnName("target_objc_con_name");

                    b.Property<string>("TblDbsName")
                        .HasColumnType("text")
                        .HasColumnName("tbl_dbs_name");

                    b.Property<string>("TblName")
                        .HasColumnType("text")
                        .HasColumnName("tbl_name");

                    b.Property<char?>("TrunctTblAftrLoad")
                        .HasColumnType("character(1)")
                        .HasColumnName("trunct_tbl_aftr_load");

                    b.Property<char?>("TrunctTblBefrLoad")
                        .HasColumnType("character(1)")
                        .HasColumnName("trunct_tbl_befr_load");

                    b.Property<string>("Type2Colmns")
                        .HasColumnType("text")
                        .HasColumnName("type2_colmns");

                    b.Property<string>("Usrname")
                        .HasColumnType("text")
                        .HasColumnName("usrname");

                    b.Property<int?>("YearsOfHistory")
                        .HasColumnType("integer")
                        .HasColumnName("years_of_history");

                    b.HasKey("DatbsSrcId", "ConfgrtnEffEndTs");

                    b.ToTable("datbs_srcs", "codebotmstr");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.LoadStrategy", b =>
                {
                    b.Property<string>("LoadStrategyDescription")
                        .HasMaxLength(900)
                        .HasColumnType("character varying(900)")
                        .HasColumnName("load_stratgy_description");

                    b.Property<int?>("LoadStrategyId")
                        .HasColumnType("integer")
                        .HasColumnName("load_stratgy_id");

                    b.Property<string>("LoadStrategyName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("load_stratgy_name");

                    b.ToTable("load_strategy", "codebotmstr");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.Order.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OrderName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.RunTimeParameters", b =>
                {
                    b.Property<DateTime>("ConfigurationEffectiveEndTimestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("confgrtn_eff_end_ts");

                    b.Property<DateTime?>("ConfigurationEffectiveStartTimestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("confgrtn_eff_start_ts");

                    b.Property<string>("ParameterValue")
                        .HasColumnType("text")
                        .HasColumnName("parmtr_val");

                    b.Property<int?>("RuntimeParametersMasterId")
                        .HasColumnType("integer")
                        .HasColumnName("rtm_parmtrs_mstr_id");

                    b.Property<int?>("TableConfigId")
                        .HasColumnType("integer")
                        .HasColumnName("table_config_id");

                    b.ToTable("run_time_parmtrs", "codebotmstr");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.RunTimeParametersMaster", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("rtm_parmtrs_mstr_id");

                    b.Property<string>("ParameterKey")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("parmtr_key");

                    b.Property<DateTime?>("RowInsertTimestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("row_instr_ts");

                    b.Property<DateTime?>("RowUpdateTimestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("row_upd_ts");

                    b.ToTable("run_time_parmtrs_mstr", "codebotmstr");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.TableColConfiguration", b =>
                {
                    b.Property<int>("TblColConfgrtnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tbl_col_confgrtn_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TblColConfgrtnId"));

                    b.Property<string>("ColmnName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("colmn_name");

                    b.Property<string>("ColmnTrnsfrmtnStep1")
                        .HasColumnType("text")
                        .HasColumnName("colmn_trnsfrmtn_step1");

                    b.Property<DateTime>("ConfgrtnEffEndTs")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("confgrtn_eff_end_ts");

                    b.Property<DateTime?>("ConfgrtnEffStartTs")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("confgrtn_eff_start_ts");

                    b.Property<short?>("CurrRowInd")
                        .HasColumnType("smallint")
                        .HasColumnName("curr_row_ind");

                    b.Property<string>("DataType")
                        .HasColumnType("text")
                        .HasColumnName("data_type");

                    b.Property<char?>("GenrtIdInd")
                        .HasColumnType("bpchar(1)")
                        .HasColumnName("genrt_id_ind");

                    b.Property<short?>("IdGenrtnStratgyId")
                        .HasColumnType("smallint")
                        .HasColumnName("id_genrtn_stratgy_id");

                    b.Property<short?>("JoinDupsInd")
                        .HasColumnType("smallint")
                        .HasColumnName("join_dups_ind");

                    b.Property<short?>("LadInd")
                        .HasColumnType("smallint")
                        .HasColumnName("lad_ind");

                    b.Property<string>("Pattern1")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("pattern1");

                    b.Property<string>("Pattern2")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("pattern2");

                    b.Property<char?>("Pattern3")
                        .HasColumnType("bpchar(1)")
                        .HasColumnName("pattern3");

                    b.Property<int>("TblConfgrtnId")
                        .HasColumnType("integer")
                        .HasColumnName("tbl_confgrtn_id");

                    b.Property<short?>("Type2EndInd")
                        .HasColumnType("smallint")
                        .HasColumnName("type2_end_ind");

                    b.Property<short?>("Type2StartInd")
                        .HasColumnType("smallint")
                        .HasColumnName("type2_start_ind");

                    b.HasKey("TblColConfgrtnId");

                    b.ToTable("tbl_col_confgrtn", "codebotmstr");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.TblLoadStrategy", b =>
                {
                    b.Property<DateTime>("ConfigurationEffectiveEndTimestamp")
                        .HasColumnType("timestamp")
                        .HasColumnName("confgrtn_eff_end_ts");

                    b.Property<DateTime?>("ConfigurationEffectiveStartTimestamp")
                        .HasColumnType("timestamp")
                        .HasColumnName("confgrtn_eff_start_ts");

                    b.Property<int?>("LoadStrategyId")
                        .HasColumnType("integer")
                        .HasColumnName("load_stratgy_id");

                    b.Property<int?>("TableConfigId")
                        .HasColumnType("integer")
                        .HasColumnName("table_config_id");

                    b.ToTable("tbl_load_strategy", "codebotmstr");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.User.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", "usr");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.User.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedClaim")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "usr");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("GeneratedCode")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", "usr");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.User.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "usr");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.User.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<DateTime>("LoggedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "usr");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.User.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens", "usr");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.User.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedUserRoleDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "usr");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.User.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("GeneratedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "usr");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.UserQueries", b =>
                {
                    b.Property<int?>("UserQueryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("usr_qry_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("UserQueryId"));

                    b.Property<int?>("BaseQueryIndicator")
                        .HasColumnType("integer")
                        .HasColumnName("base_query_ind");

                    b.Property<int?>("QueryOrderIndicator")
                        .HasColumnType("integer")
                        .HasColumnName("qry_order_ind");

                    b.Property<DateTime?>("RowInsertTimestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("row_instr_ts");

                    b.Property<int?>("TableConfigId")
                        .HasColumnType("integer")
                        .HasColumnName("table_config_id");

                    b.Property<string>("UserQuery")
                        .HasColumnType("text")
                        .HasColumnName("usr_qry");

                    b.HasKey("UserQueryId");

                    b.ToTable("usr_queries", "codebotmstr");
                });

            modelBuilder.Entity("TableConfiguration", b =>
                {
                    b.Property<int?>("TblConfgrtnId")
                        .HasColumnType("integer")
                        .HasColumnName("tbl_confgrtn_id");

                    b.Property<DateTime?>("ConfgrtnEffStartTs")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("confgrtn_eff_start_ts");

                    b.Property<string>("AdtnlWherCondtns")
                        .HasColumnType("text")
                        .HasColumnName("adtnl_wher_condtns");

                    b.Property<DateTime?>("ConfgrtnEffEndTs")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("confgrtn_eff_end_ts");

                    b.Property<int?>("DatbsSrcId")
                        .HasColumnType("integer")
                        .HasColumnName("datbs_src_id");

                    b.Property<string>("DedupByColmns")
                        .HasColumnType("text")
                        .HasColumnName("dedup_by_colmns");

                    b.Property<string>("DedupLogic")
                        .HasColumnType("text")
                        .HasColumnName("dedup_logic");

                    b.Property<string>("DeltRowIdntfctn")
                        .HasColumnType("text")
                        .HasColumnName("delt_row_idntfctn");

                    b.Property<string>("DmlActionType")
                        .HasColumnType("text")
                        .HasColumnName("dml_action_type");

                    b.Property<int?>("EstmtdTblSiz")
                        .HasColumnType("integer")
                        .HasColumnName("estmtd_tbl_siz");

                    b.Property<string>("InstncName")
                        .HasColumnType("text")
                        .HasColumnName("instnc_name");

                    b.Property<string>("InstncUseType")
                        .HasColumnType("text")
                        .HasColumnName("instnc_use_type");

                    b.Property<string>("ObjctAls")
                        .HasColumnType("text")
                        .HasColumnName("objct_als");

                    b.Property<string>("ObjctNatr")
                        .HasColumnType("text")
                        .HasColumnName("objct_natr");

                    b.Property<string>("PartitionClause")
                        .HasColumnType("text")
                        .HasColumnName("partition_clause");

                    b.Property<string>("PartitionColmns")
                        .HasColumnType("text")
                        .HasColumnName("partition_colmns");

                    b.Property<string>("PkColmns")
                        .HasColumnType("text")
                        .HasColumnName("pk_colmns");

                    b.Property<string>("Queryband")
                        .HasColumnType("text")
                        .HasColumnName("queryband");

                    b.Property<string>("SetlSetupName")
                        .HasColumnType("text")
                        .HasColumnName("setl_setup_name");

                    b.Property<string>("SqlToUseForSel")
                        .HasColumnType("text")
                        .HasColumnName("sql_to_use_for_sel");

                    b.Property<int?>("SrcPatrnId")
                        .HasColumnType("integer")
                        .HasColumnName("src_patrn_id");

                    b.Property<string>("TargetObjcConName")
                        .HasColumnType("text")
                        .HasColumnName("target_objc_con_name");

                    b.Property<char?>("TrunctTblAftrLoad")
                        .HasColumnType("character(1)")
                        .HasColumnName("trunct_tbl_aftr_load");

                    b.Property<char?>("TrunctTblBefrLoad")
                        .HasColumnType("character(1)")
                        .HasColumnName("trunct_tbl_befr_load");

                    b.Property<string>("Type2Colmns")
                        .HasColumnType("text")
                        .HasColumnName("type2_colmns");

                    b.Property<int?>("YearsOfHistory")
                        .HasColumnType("integer")
                        .HasColumnName("years_of_history");

                    b.HasKey("TblConfgrtnId", "ConfgrtnEffStartTs");

                    b.ToTable("tbl_confgrtn", "codebotmstr");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.Order.Order", b =>
                {
                    b.HasOne("Dnct.Domain.Entities.User.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.User.RoleClaim", b =>
                {
                    b.HasOne("Dnct.Domain.Entities.User.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.User.UserClaim", b =>
                {
                    b.HasOne("Dnct.Domain.Entities.User.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.User.UserLogin", b =>
                {
                    b.HasOne("Dnct.Domain.Entities.User.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.User.UserRefreshToken", b =>
                {
                    b.HasOne("Dnct.Domain.Entities.User.User", "User")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.User.UserRole", b =>
                {
                    b.HasOne("Dnct.Domain.Entities.User.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dnct.Domain.Entities.User.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.User.UserToken", b =>
                {
                    b.HasOne("Dnct.Domain.Entities.User.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.User.Role", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Dnct.Domain.Entities.User.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Orders");

                    b.Navigation("Tokens");

                    b.Navigation("UserRefreshTokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
